/*	Prototipi per le funzioni delle Numerical Recipes.*/#ifndef __NRECIPES__#define __NRECIPES__#include "m_indep.h"#if macintosh/* file dfpmin.c */void dfpmin(extended p[], int n, extended ftol, int *iter,	extended *fret, extended (*func)(extended *), 	void (*dfunc)(extended *, extended *, extended));/* file linmin.c */void linmin(extended p[], extended xi[], int n, extended *fret,	extended (*func)(extended *));/* file brent.c */extended brent(extended, extended, extended, 	extended (*func)(extended), extended, extended *);/* file mnbrak.c */void mnbrak(extended *ax, extended *bx, extended *cx, extended *fa,	extended *fb, extended *fc, extended (*func)(extended));/* file lu.c */int ludcmp(extended **a, int n, short *indx, extended *d);void lubksb(extended **a, int n, short *indx, extended b[]);/* file NRUtil.c */extended *evector(int, int);short *svector(int start, int end);int *ivector(int start, int end);extended **ematrix(int nrl, int nrh, int ncl, int nch);void free_evector(extended *p, int start, int end);void free_svector(short *p, int start, int end);void free_ivector(int *p, int start, int end);void free_ematrix(extended **m, int nrl, int nrh, int ncl, int nch);#else not macintosh: K&R style declarations/* file dfpmin.c */void dfpmin();/* file linmin.c */void linmin();/* file brent.c */extended brent();/* file mnbrak.c */void mnbrak();/* file lu.c */int ludcmp();void lubksb();/* file NRUtil.c */extended *evector();short *svector();extended **ematrix();void free_evector();void free_svector();void free_ematrix();#endif macintosh#endif __NRECIPES__