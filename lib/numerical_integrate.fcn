{ Numerical_integrate: compute a numerical approximation of the  integer of a function f(x) in the interval (from,to), using the trapezoids method (Bezout). Other methods can be easily programmed as well.}FUNCTION numerical_integrate( FUNCTION f(x), a, b);VAR i,    { this is a service variable for the integration loop }    z,    { this is the integration variable }    sum,  { this holds the temporary sum }    step, { this is the interval between function evaluations }    y1,   {Êthis is the function evaluation f(z) }    y2,   {Êthis is the function evaluation f(z + step) }		n_steps;BEGIN {ÊN_steps controls the accuracy of the approximation. Setting n_steps   to an higher value raises the accuracy, but slows down the computation.   You should decide by yourself what accuracy is needed for your problem. } n_steps := 50; { Initialization } sum := 0; step := (b - a)/n_steps; z := a; y1 := f(z); { Loop } FOR i := 1 TO n_steps DO BEGIN  z := z + step;  y2 := f(z);    sum := sum + step*(y1+y2)/2;  { Trapezoid area formula }    y1 := y2; END;  numerical_integrate := sum;END;    {Ênumerical_integrate }